plugins {
    id("io.openlineage.common-java-config")
    id("io.openlineage.print-source-set-configuration")
    id("io.openlineage.standard-spotless")
    id("io.freefair.lombok") version "8.4"
}

lombok {
    version = "1.18.30"
}

ext {
    assertjVersion = "3.25.1"
    sparkVersion = "2.4.8"
    junit5Version = "5.10.1"
    mockitoVersion = "4.11.0"
    lombokVersion = "1.18.20"
    postgresqlVersion = "42.7.1"
}

dependencies {
    implementation(project(":shared"))

    compileOnly("com.fasterxml.jackson.module:jackson-module-scala_2.12:2.15.3")
    compileOnly("org.apache.spark:spark-sql_2.12:${sparkVersion}")

    testImplementation("com.fasterxml.jackson.module:jackson-module-scala_2.12:2.15.3")
    testImplementation("org.apache.spark:spark-core_2.12:${sparkVersion}")
    testImplementation("org.apache.spark:spark-sql_2.12:${sparkVersion}")
    testImplementation("org.apache.spark:spark-hive_2.12:${sparkVersion}")
    testImplementation("com.fasterxml.jackson.module:jackson-module-scala_2.12:2.15.3")
    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter:${junit5Version}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-inline:${mockitoVersion}")
    testImplementation("org.postgresql:postgresql:${postgresqlVersion}")
}


tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}
