plugins {
    id("io.openlineage.common-java-config")
    id("io.openlineage.print-source-set-configuration")
    id("io.openlineage.scala213-variant")
    id("io.openlineage.standard-spotless")
    id("io.freefair.lombok") version "8.4"
}

lombok {
    version = "1.18.30"
}

ext {
    assertjVersion = "3.25.1"
    junit5Version = "5.10.1"
    mockitoVersion = "4.11.0"
    jacksonVersion = "2.15.3"
    bigqueryVersion = "0.29.0"

    defaultSparkVersion = "3.1.3"
    defaultSparkSeries = defaultSparkVersion.substring(0, 3)
    defaultScalaVersion = "2.12"
    defaultIcebergVersion = "1.0.0"
    defaultDeltaVersion = "1.0.1"

    scala213SparkVersion = "3.2.4"
    scala213SparkSeries = scala213SparkVersion.substring(0, 3)
    scala213IcebergVersion = "1.4.3"
    scala213DeltaVersion = "1.1.0"
}

dependencies {
    implementation(project(":shared"))

    compileOnly("com.google.cloud.spark:spark-bigquery-with-dependencies_${defaultScalaVersion}:${bigqueryVersion}") {
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "com.fasterxml.jackson.module"
    }
    compileOnly("org.apache.spark:spark-core_${defaultScalaVersion}:${defaultSparkVersion}")
    compileOnly("org.apache.spark:spark-sql_${defaultScalaVersion}:${defaultSparkVersion}")
    compileOnly("org.apache.spark:spark-hive_${defaultScalaVersion}:${defaultSparkVersion}")
    compileOnly("org.apache.spark:spark-sql-kafka-0-10_${defaultScalaVersion}:${defaultSparkVersion}")
    // this needs to be kept in sync with the version of spark we use in this project.
    // good god, i wasted an entire day trying to debug an obscure 'IncompatibleClassChangeError'
    // all because spark is set to 3.1.x and this was set to 3.2.
    compileOnly("org.apache.iceberg:iceberg-spark-runtime-${defaultSparkSeries}_${defaultScalaVersion}:${defaultIcebergVersion}")
    compileOnly("io.delta:delta-core_${defaultScalaVersion}:${defaultDeltaVersion}")
    compileOnly("com.databricks:databricks-dbutils-scala_${defaultScalaVersion}:0.1.4") {
        exclude group: "com.fasterxml.jackson.core"
    }

    testImplementation("com.google.cloud.spark:spark-bigquery-with-dependencies_${defaultScalaVersion}:${bigqueryVersion}") {
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "com.fasterxml.jackson.module"
    }
    testImplementation("org.apache.spark:spark-core_${defaultScalaVersion}:${defaultSparkVersion}")
    testImplementation("org.apache.spark:spark-sql_${defaultScalaVersion}:${defaultSparkVersion}")
    testImplementation("org.apache.spark:spark-hive_${defaultScalaVersion}:${defaultSparkVersion}")
    testImplementation("org.apache.spark:spark-sql-kafka-0-10_${defaultScalaVersion}:${defaultSparkVersion}")
    testImplementation("org.apache.iceberg:iceberg-spark-runtime-${defaultSparkSeries}_${defaultScalaVersion}:${defaultIcebergVersion}")
    testImplementation("io.delta:delta-core_${defaultScalaVersion}:${defaultDeltaVersion}")
    testImplementation("com.databricks:databricks-dbutils-scala_${defaultScalaVersion}:0.1.4") {
        exclude group: "com.fasterxml.jackson.core"
    }
    testImplementation("com.fasterxml.jackson.module:jackson-module-scala_${defaultScalaVersion}:${jacksonVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter:${junit5Version}")
    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-inline:${mockitoVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")

    // Scala 2.13 - I was hoping to avoid this, but 'spark24' tests fail under Scala 2.13 conditions
    // java.lang.NoSuchMethodError: org.apache.spark.sql.catalyst.plans.logical.DeltaMergeAction.targetColNameParts()Lscala/collection/Seq;
    //      at io.openlineage.spark34.agent.lifecycle.plan.column.MergeIntoDelta24ColumnLineageVisitorTest.testGetMergeActions(MergeIntoDelta24ColumnLineageVisitorTest.java:128)
    scala213Implementation(project(path: ":shared", configuration: "scala213RuntimeElements"))

    scala213CompileOnly("com.google.cloud.spark:spark-bigquery-with-dependencies_2.13:${bigqueryVersion}") {
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "com.fasterxml.jackson.module"
    }
    scala213CompileOnly("org.apache.spark:spark-core_2.13:${scala213SparkVersion}")
    scala213CompileOnly("org.apache.spark:spark-sql_2.13:${scala213SparkVersion}")
    scala213CompileOnly("org.apache.spark:spark-hive_2.13:${scala213SparkVersion}")
    scala213CompileOnly("org.apache.spark:spark-sql-kafka-0-10_2.13:${scala213SparkVersion}")
    scala213CompileOnly("org.apache.iceberg:iceberg-spark-runtime-${scala213SparkSeries}_2.13:${scala213IcebergVersion}")
    scala213CompileOnly("io.delta:delta-core_2.13:${scala213DeltaVersion}")
    scala213CompileOnly("com.databricks:databricks-dbutils-scala_2.13:0.1.4") {
        exclude group: "com.fasterxml.jackson.core"
    }

    testScala213Implementation("com.google.cloud.spark:spark-bigquery-with-dependencies_2.13:${bigqueryVersion}") {
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "com.fasterxml.jackson.module"
    }
    testScala213Implementation("org.apache.spark:spark-core_2.13:${scala213SparkVersion}")
    testScala213Implementation("org.apache.spark:spark-sql_2.13:${scala213SparkVersion}")
    testScala213Implementation("org.apache.spark:spark-hive_2.13:${scala213SparkVersion}")
    testScala213Implementation("org.apache.spark:spark-sql-kafka-0-10_2.13:${scala213SparkVersion}")
    testScala213Implementation("org.apache.iceberg:iceberg-spark-runtime-${scala213SparkSeries}_2.13:${scala213IcebergVersion}")
    testScala213Implementation("io.delta:delta-core_2.13:${scala213DeltaVersion}")
    testScala213Implementation("com.databricks:databricks-dbutils-scala_2.13:0.1.4") {
        exclude group: "com.fasterxml.jackson.core"
    }
    testScala213Implementation("com.fasterxml.jackson.module:jackson-module-scala_2.13:${jacksonVersion}")
    testScala213Implementation("org.junit.jupiter:junit-jupiter:${junit5Version}")
    testScala213Implementation("org.assertj:assertj-core:${assertjVersion}")
    testScala213Implementation("org.mockito:mockito-core:${mockitoVersion}")
    testScala213Implementation("org.mockito:mockito-inline:${mockitoVersion}")
    testScala213Implementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
}
