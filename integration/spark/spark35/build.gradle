plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '6.12.0'
    id "com.adarshr.test-logger" version "3.2.0"
    id "org.gradle.test-retry" version "1.5.8"
    id "pmd"
}

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = true
}

pmdMain {
    reports {
        html.required = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://astronomer.jfrog.io/artifactory/maven-public-libs-snapshot'
    }
}

archivesBaseName = 'openlineage-spark-spark3'

ext {
    assertjVersion = '3.25.1'
    junit5Version = '5.10.1'
    mockitoVersion = '4.11.0'
    sparkVersion = '3.5.0'
    scalaVersion = project.getProperty('scala.binary.version')
    jacksonVersion = '2.15.3'
    lombokVersion = '1.18.30'
    bigqueryVersion = '0.29.0'
}

sourceSets {
    scala213 {
        java {
            srcDir("src/main/java")
        }
        resources {
            srcDir("src/main/resources")
        }
    }

    scala213Test {
        compileClasspath += sourceSets.scala213.output + sourceSets.scala213.compileClasspath
        runtimeClasspath += sourceSets.scala213.output + sourceSets.scala213.runtimeClasspath
        java {
            srcDir("src/test/java")
        }
        resources {
            srcDir("src/test/resources")
        }
    }
}

dependencies {
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Scala 2.12
    implementation(project(":shared"))
    implementation(project(":spark3"))
    implementation("org.apache.spark:spark-core_2.12:${sparkVersion}")
    implementation("org.apache.spark:spark-sql_2.12:${sparkVersion}")
    implementation("org.apache.spark:spark-hive_2.12:${sparkVersion}")
    implementation("org.apache.spark:spark-sql-kafka-0-10_2.12:${sparkVersion}")
    implementation("org.scala-lang.modules:scala-collection-compat_2.12:2.11.0")
    implementation("com.google.cloud.spark:spark-bigquery-with-dependencies_2.12:${bigqueryVersion}") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.module'
        exclude group: 'com.sun.jmx'
        exclude group: 'com.sun.jdmk'
        exclude group: 'javax.jms'
    }

    testImplementation("org.junit.jupiter:junit-jupiter:${junit5Version}")
    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-inline:${mockitoVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")

    // Scala 2.13
    scala213Implementation(project(":shared"))
    scala213Implementation(project(":spark3"))
    scala213Implementation("org.projectlombok:lombok:${lombokVersion}")
    scala213Implementation("org.apache.spark:spark-core_2.13:${sparkVersion}")
    scala213Implementation("org.apache.spark:spark-sql_2.13:${sparkVersion}")
    scala213Implementation("org.apache.spark:spark-hive_2.13:${sparkVersion}")
    scala213Implementation("org.apache.spark:spark-sql-kafka-0-10_2.13:${sparkVersion}")
    scala213Implementation("org.scala-lang.modules:scala-collection-compat_2.13:2.11.0")
    scala213Implementation("com.google.cloud.spark:spark-bigquery-with-dependencies_2.13:${bigqueryVersion}") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.module'
        exclude group: 'com.sun.jmx'
        exclude group: 'com.sun.jdmk'
        exclude group: 'javax.jms'
    }

    scala213TestImplementation("org.assertj:assertj-core:${assertjVersion}")
    scala213TestImplementation("org.junit.jupiter:junit-jupiter:${junit5Version}")
    scala213TestImplementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
    scala213TestImplementation("org.mockito:mockito-core:${mockitoVersion}")
    scala213TestImplementation("org.mockito:mockito-inline:${mockitoVersion}")
}

def commonTestConfiguration = {
    forkEvery 1
    maxParallelForks 5
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperties = [
            'junit.platform.output.capture.stdout': 'true',
            'junit.platform.output.capture.stderr': 'true',
            'spark.version'                       : "${sparkVersion}",
            'openlineage.spark.jar'               : "${archivesBaseName}-${project.version}.jar",
            'kafka.package.version'               : "org.apache.spark:spark-sql-kafka-0-10_2.12:${sparkVersion}",
            'mockserver.logLevel'                 : 'ERROR'
    ]
}

tasks.withType(Test).configureEach {
    configure commonTestConfiguration
    useJUnitPlatform()
}

tasks.register("testScala213", Test) {
    description = "Runs unit tests using the Apache Spark 3.5.x libraries compiled with Scala 2.13.y"
    group = "verification"
    testClassesDirs = sourceSets.scala213Test.output.classesDirs
    classpath = sourceSets.scala213Test.runtimeClasspath
}

tasks.withType(JavaCompile).configureEach {
    // add annotation processor classpath to each java compile task
    options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.register("testAll") {
    dependsOn(tasks.named("test"), tasks.named("testScala213"))
    description = "Runs all tests in this module"
    group = "verification"
}

tasks.build {
    dependsOn(tasks.named("testAll"))
}

spotless {
    def disallowWildcardImports = {
        String text = it
        def regex = ~/import .*\.\*;/
        def m = regex.matcher(text)
        if (m.find()) {
            throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
        }
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        custom 'disallowWildcardImports', disallowWildcardImports
    }
}
